=begin
	This script exists to report on the Ebon Gate Treasure Trove, specifically reporting the awarded item, the winner of said item, and the next item up for raffle
	Author: HebrewToYou
	Version: 1.0.2
        Date Created: 2019-10-16
        Date Updated: 2019-10-17
        game: gs4
        tags: lich, ebon gate, eg, treasure trove, trove, raffle, towncrier
        Usage: ;troving_reporter

        1.0.0 (2019-10-16): Initial Version
	1.0.1 (2019-10-17): Added support for properly reporting the results when the reporter wins the raffle
	1.0.2 (2019-10-18): Added support for broadcasting the results to the TownCrier channel
=end

cabinet = Hash.new

HELLO_MESSAGE = "Here we go again!"
GOODBYE_MESSAGE = "Thanks for listening! We'll be back tomorrow morning at noon!"
TIME_TO_WAIT = 5 # Seconds to wait  before making an annoucement if a winner is found and no new prize is selected

interval = "In just under 1 hour"
reporter = "Trovar"
announcement = ""
channel = "TownCrier"

before_dying do
	respond ""
	respond "#{cabinet.inspect}"
	respond ""
end

loop {
	line = get
	
	# First item of the day is added to the shelf
	if line =~ /^A mechanical mithril hand emerges from beneath an open panel and replenishes the empty spot along the shelf with (.*?)\./
		cabinet[:shelf] = $1.to_s
		announcement = "[TREASURE TROVE] #{HELLO_MESSAGE} #{interval} the next item at the Treasure Trove will pull for: #{cabinet[:shelf]}."
		respond " "
		respond "#{announcement}"
		respond " "
		if Char.name == reporter
			LNet.send_message(attr={'type'=>'channel', 'channel'=>channel}, "#{announcement}")
		end
		
	# Reporter is the winner of the raffle
	elsif line =~ /^Congratulations!  You are now the proud owner of (.*?)!/
		cabinet[:rack] = $1.to_s
		cabinet[:winner] = Char.name
		
		# A new item is added to the shelf
		line = get
		if line =~ /^A mechanical mithril hand emerges from beneath an open panel and replenishes the empty spot along the shelf with (.*?)\./
			cabinet[:shelf] = $1.to_s
		end
		
		# Known Winner and NOT End of Day
		if cabinet[:rack] && cabinet[:winner] && cabinet[:shelf]
			announcement = "[TREASURE TROVE] Congratulations to the lucky Treasure Trove winner this hour for: #{cabinet[:rack]}, it's #{cabinet[:winner]}! #{interval} the next item at the Treasure Trove will pull for: #{cabinet[:shelf]}."
			respond " "
			respond "#{announcement}"
			respond " "
			if Char.name == reporter
				LNet.send_message(attr={'type'=>'channel', 'channel'=>channel}, "#{announcement}")
			end
		
		# Known Winner and End of Day
		elsif cabinet[:rack] && cabinet[:winner] && !cabinet[:shelf]
			announcement = "[TREASURE TROVE] Congratulations to the lucky Treasure Trove winner this hour for: #{cabinet[:rack]}, it's #{cabinet[:winner]}! #{GOODBYE_MESSAGE}"
			respond " "
			respond "#{announcement}"
			respond " "
			if Char.name == reporter
				LNet.send_message(attr={'type'=>'channel', 'channel'=>channel}, "#{announcement}")
			end
		end
	
	# Raffle draws and item drops to the rack
	elsif line =~ /^A hidden panel beneath (.*) opens/
		cabinet[:rack] = $1.to_s
		cabinet[:winner] = nil
		cabinet[:shelf] = nil
		
		# Winner is announced
		line = get
		if line =~ /^And the winner of (.*) is... (.*)!/
			cabinet[:winner] = $2.to_s
		
		# A new item is added to the shelf
		elsif line =~ /^A mechanical mithril hand emerges from beneath an open panel and replenishes the empty spot along the shelf with (.*?)\./
			cabinet[:shelf] = $1.to_s
		end
		
		# A new item is added to the shelf
		line = get
		if line =~ /^A mechanical mithril hand emerges from beneath an open panel and replenishes the empty spot along the shelf with (.*?)\./
			cabinet[:shelf] = $1.to_s
		end
	
		# Known Winner and NOT End of Day
		if cabinet[:rack] && cabinet[:winner] && cabinet[:shelf]
			announcement = "[TREASURE TROVE] Congratulations to the lucky Treasure Trove winner this hour for: #{cabinet[:rack]}, it's #{cabinet[:winner]}! #{interval} the next item at the Treasure Trove will pull for: #{cabinet[:shelf]}."
			respond " "
			respond "#{announcement}"
			respond " "
			if Char.name == reporter
				LNet.send_message(attr={'type'=>'channel', 'channel'=>channel}, "#{announcement}")
			end
		
		# Known Winner and End of Day
		elsif cabinet[:rack] && cabinet[:winner] && !cabinet[:shelf]
			announcement = "[TREASURE TROVE] Congratulations to the lucky Treasure Trove winner this hour for: #{cabinet[:rack]}, it's #{cabinet[:winner]}! #{GOODBYE_MESSAGE}"
			respond " "
			respond "#{announcement}"
			respond " "
			if Char.name == reporter
				LNet.send_message(attr={'type'=>'channel', 'channel'=>channel}, "#{announcement}")
			end
		
		# Unknown Winner and NOT End of Day
		elsif cabinet[:rack] && !cabinet[:winner] && cabinet[:shelf]
			announcement = "[TREASURE TROVE] Congratulations to the lucky Treasure Trove winner this hour for: #{{cabinet[:rack]}, but we don't know their name because they're not logged in; they have under an hour to claim their win, though. #{interval} the next item at the Treasure Trove will pull for: #{cabinet[:shelf]}."
			respond " "
			respond "#{announcement}"
			respond " "
			if Char.name == reporter
				LNet.send_message(attr={'type'=>'channel', 'channel'=>channel}, "#{announcement}")
			end
		
		# Unknown Winner and End of Day
		elsif cabinet[:rack] && !cabinet[:winner] && !cabinet[:shelf]
			announcement = "[TREASURE TROVE] Congratulations to the lucky Treasure Trove winner this hour for: #{{cabinet[:rack]}, but we don't know their name because they're not logged in; they have under an hour to claim their win, though. #{GOODBYE_MESSAGE}."
			respond " "
			respond "#{announcement}"
			respond " "
			if Char.name == reporter
				LNet.send_message(attr={'type'=>'channel', 'channel'=>channel}, "#{announcement}")
			end
		end
	end	
	cabinet[:rack] = nil
	cabinet[:winner] = nil
	cabinet[:shelf] = nil
}
